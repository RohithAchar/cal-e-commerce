// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store{
  id          String      @id @default(uuid())
  name        String
  userId      String
  BillBoards  BillBoard[] @relation("StoreToBillBoard")
  categories  Category[]  @relation("StoreToCategory")
  sizes       Size[]      @relation("StoreToSize")
  colors      Color[]     @relation("StoreToColor")
  products    Product[]   @relation("StoreToProduct")
  orders      Order[]     @relation("StoreToOrder")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model BillBoard{
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToBillBoard", fields: [storeId], references: [id])
  categories  Category[]  
  label       String
  imageUrl    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category{
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   BillBoard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct" )
  createdAt   DateTime  @default(now())
  updatedAt   DateTime   @updatedAt
}

model Size{
  id        String    @id  @default(uuid())
  storeId   String 
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color{
  id        String    @id  @default(uuid())
  storeId   String 
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product{
  id          String    @id  @default(uuid())
  storeId     String 
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  isArchived  Boolean   @default(false)
  isFeatured  Boolean   @default(false)
  sizeId      String
  size        Size      @relation(fields: [sizeId], references: [id] )
  colorId     String
  color       Color     @relation(fields: [colorId], references: [id])
  images      Image[]   
  orderItem   OrderItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt 
}

model Image{
  id          String    @id  @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order{
  id          String    @id  @default(uuid())
  storeId     String
  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems  OrderItem[]
  isPaid      Boolean   @default(false)
  phone       String    @default("")
  address     String    @default("")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model OrderItem{
  id          String    @id  @default(uuid())
  orderId     String
  order       Order     @ relation(fields: [orderId], references: [id])
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
}